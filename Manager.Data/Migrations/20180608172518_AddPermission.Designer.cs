// <auto-generated />
using System;
using Manager.Data.EntityFramework;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Manager.Data.Migrations
{
    [DbContext(typeof(ManagerContext))]
    [Migration("20180608172518_AddPermission")]
    partial class AddPermission
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.0-rtm-30799")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Manager.Models.Generic.BusinessEntity", b =>
                {
                    b.Property<int>("BusinessEntityId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.HasKey("BusinessEntityId");

                    b.ToTable("BusinessEntity","Generic");

                    b.HasDiscriminator<string>("Discriminator").HasValue("BusinessEntity");
                });

            modelBuilder.Entity("Manager.Models.GroupBuying.Group", b =>
                {
                    b.Property<int>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<DateTime>("EndTime");

                    b.Property<string>("Remark")
                        .HasMaxLength(512);

                    b.Property<DateTime>("StartTime");

                    b.HasKey("GroupId");

                    b.HasIndex("CreatedBy");

                    b.ToTable("Group","GroupBuying");
                });

            modelBuilder.Entity("Manager.Models.GroupBuying.GroupStore", b =>
                {
                    b.Property<int>("GroupId");

                    b.Property<int>("StoreId");

                    b.HasKey("GroupId", "StoreId");

                    b.HasIndex("StoreId");

                    b.ToTable("GroupStore","GroupBuying");
                });

            modelBuilder.Entity("Manager.Models.GroupBuying.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("AmountPaid")
                        .HasColumnType("decimal(19, 4)");

                    b.Property<decimal>("AmountPayable")
                        .HasColumnType("decimal(19, 4)");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.HasKey("OrderId");

                    b.HasIndex("CreatedBy");

                    b.ToTable("Order","GroupBuying");
                });

            modelBuilder.Entity("Manager.Models.GroupBuying.OrderDetail", b =>
                {
                    b.Property<int>("OrderDetailId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OrderId");

                    b.Property<int>("ProductItemId");

                    b.Property<string>("ProductItemName")
                        .HasMaxLength(64);

                    b.Property<decimal>("ProductItemPrice")
                        .HasColumnType("decimal(19, 4)");

                    b.Property<int>("Quantity");

                    b.HasKey("OrderDetailId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductItemId");

                    b.ToTable("OrderDetail","GroupBuying");
                });

            modelBuilder.Entity("Manager.Models.GroupBuying.OrderDetailProductAccessory", b =>
                {
                    b.Property<int>("OrderDetailId");

                    b.Property<int>("ProductAccessoryId");

                    b.Property<string>("ProductAccessoryName")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<decimal>("ProductAccessoryPrice")
                        .HasColumnType("decimal(19, 4)");

                    b.HasKey("OrderDetailId", "ProductAccessoryId");

                    b.HasIndex("ProductAccessoryId");

                    b.ToTable("OrderDetailProductAccessory","GroupBuying");
                });

            modelBuilder.Entity("Manager.Models.GroupBuying.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(64);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<int>("ProductCategoryId");

                    b.HasKey("ProductId");

                    b.HasIndex("ProductCategoryId");

                    b.ToTable("Product","GroupBuying");

                    b.HasData(
                        new { ProductId = 1, Name = "韓式牛肉烤肉飯", ProductCategoryId = 1 },
                        new { ProductId = 2, Name = "韓式豬肉烤肉飯", ProductCategoryId = 1 },
                        new { ProductId = 3, Name = "韓式牛肉拌飯", ProductCategoryId = 1 },
                        new { ProductId = 4, Name = "韓式豬肉拌飯", ProductCategoryId = 1 },
                        new { ProductId = 5, Name = "韓式辣雞拌飯", ProductCategoryId = 1 },
                        new { ProductId = 6, Name = "香腸泡菜炒飯", ProductCategoryId = 1 },
                        new { ProductId = 7, Name = "鮪魚泡菜炒飯", ProductCategoryId = 1 },
                        new { ProductId = 8, Name = "海鮮豆腐鍋", ProductCategoryId = 2 },
                        new { ProductId = 9, Name = "海鮮泡菜鍋", ProductCategoryId = 2 },
                        new { ProductId = 10, Name = "大醬湯飯鍋", ProductCategoryId = 2 },
                        new { ProductId = 11, Name = "豆腐辣湯鍋", ProductCategoryId = 2 },
                        new { ProductId = 12, Name = "部隊鍋", ProductCategoryId = 2 },
                        new { ProductId = 13, Name = "辣炒泡麵", ProductCategoryId = 3 },
                        new { ProductId = 14, Name = "海鮮炒麵", ProductCategoryId = 3 },
                        new { ProductId = 15, Name = "辣炒年糕", ProductCategoryId = 3 },
                        new { ProductId = 16, Name = "海鮮煎餅", ProductCategoryId = 3 }
                    );
                });

            modelBuilder.Entity("Manager.Models.GroupBuying.ProductAccessory", b =>
                {
                    b.Property<int>("ProductAccessoryId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(19, 4)");

                    b.Property<int>("ProductId");

                    b.HasKey("ProductAccessoryId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductAccessory","GroupBuying");
                });

            modelBuilder.Entity("Manager.Models.GroupBuying.ProductCategory", b =>
                {
                    b.Property<int>("ProductCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<int>("StoreId");

                    b.HasKey("ProductCategoryId");

                    b.HasIndex("StoreId");

                    b.ToTable("ProductCategory","GroupBuying");

                    b.HasData(
                        new { ProductCategoryId = 1, Name = "飯類", StoreId = 1 },
                        new { ProductCategoryId = 2, Name = "鍋類", StoreId = 1 },
                        new { ProductCategoryId = 3, Name = "特色餐點", StoreId = 1 }
                    );
                });

            modelBuilder.Entity("Manager.Models.GroupBuying.ProductItem", b =>
                {
                    b.Property<int>("ProductItemId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasMaxLength(32);

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(19, 4)");

                    b.Property<int>("ProductId");

                    b.HasKey("ProductItemId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductItem","GroupBuying");

                    b.HasData(
                        new { ProductItemId = 1, Price = 90m, ProductId = 1 },
                        new { ProductItemId = 2, Price = 90m, ProductId = 2 },
                        new { ProductItemId = 3, Price = 90m, ProductId = 3 },
                        new { ProductItemId = 4, Price = 90m, ProductId = 4 },
                        new { ProductItemId = 5, Price = 90m, ProductId = 5 },
                        new { ProductItemId = 6, Price = 130m, ProductId = 6 },
                        new { ProductItemId = 7, Price = 130m, ProductId = 7 },
                        new { ProductItemId = 8, Price = 130m, ProductId = 8 },
                        new { ProductItemId = 9, Price = 130m, ProductId = 9 },
                        new { ProductItemId = 10, Price = 130m, ProductId = 10 },
                        new { ProductItemId = 11, Price = 130m, ProductId = 11 },
                        new { ProductItemId = 12, Price = 150m, ProductId = 12 },
                        new { ProductItemId = 13, Price = 100m, ProductId = 13 },
                        new { ProductItemId = 14, Price = 140m, ProductId = 14 },
                        new { ProductItemId = 15, Price = 130m, ProductId = 15 },
                        new { ProductItemId = 16, Price = 150m, ProductId = 16 }
                    );
                });

            modelBuilder.Entity("Manager.Models.GroupBuying.ProductOption", b =>
                {
                    b.Property<int>("ProductOptionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<int>("ProductId");

                    b.Property<int>("ProductOptionType");

                    b.HasKey("ProductOptionId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductOptionType");

                    b.ToTable("ProductOption","GroupBuying");
                });

            modelBuilder.Entity("Manager.Models.GroupBuying.Store", b =>
                {
                    b.Property<int>("StoreId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasMaxLength(128);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description")
                        .HasMaxLength(512);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<string>("Phone")
                        .HasMaxLength(32);

                    b.Property<string>("Remark")
                        .HasMaxLength(512);

                    b.HasKey("StoreId");

                    b.HasIndex("CreatedBy");

                    b.ToTable("Store","GroupBuying");

                    b.HasData(
                        new { StoreId = 1, Address = "台北市內湖區江南街117號", CreatedBy = 1, CreatedOn = new DateTime(2018, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "測試der", Name = "韓膳宮", Phone = "2658-2882" }
                    );
                });

            modelBuilder.Entity("Manager.Models.System.Permission", b =>
                {
                    b.Property<int>("PermissionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<bool>("IsEnabled");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.HasKey("PermissionId");

                    b.ToTable("Permission","System");

                    b.HasData(
                        new { PermissionId = 1, Description = "", IsEnabled = true, Name = "特殊權限" },
                        new { PermissionId = 2, Description = "", IsEnabled = true, Name = "登入" }
                    );
                });

            modelBuilder.Entity("Manager.Models.System.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsEnabled");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.HasKey("RoleId");

                    b.ToTable("Role","System");

                    b.HasData(
                        new { RoleId = 1, IsEnabled = true, Name = "Administrator" },
                        new { RoleId = 2, IsEnabled = true, Name = "HumanResources" }
                    );
                });

            modelBuilder.Entity("Manager.Models.System.RolePermission", b =>
                {
                    b.Property<int>("RoleId");

                    b.Property<int>("PermissionId");

                    b.HasKey("RoleId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("RolePermission","System");
                });

            modelBuilder.Entity("Manager.Models.System.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BusinessEntityId");

                    b.Property<bool>("IsEnabled");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.HasKey("UserId");

                    b.HasIndex("BusinessEntityId");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("User","System");

                    b.HasData(
                        new { UserId = 1, BusinessEntityId = 1, IsEnabled = true, PasswordHash = "rlS0uO5WqqdUOtJbKHz87yQ/ZumG1eRhjol3zl/oJeU=", UserName = "Admin" }
                    );
                });

            modelBuilder.Entity("Manager.Models.System.UserRole", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRole","System");

                    b.HasData(
                        new { UserId = 1, RoleId = 1 },
                        new { UserId = 1, RoleId = 2 }
                    );
                });

            modelBuilder.Entity("Manager.Models.Generic.Person", b =>
                {
                    b.HasBaseType("Manager.Models.Generic.BusinessEntity");

                    b.Property<DateTime>("BirthDate");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<int>("Gender");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.ToTable("Person");

                    b.HasDiscriminator().HasValue("Person");

                    b.HasData(
                        new { BusinessEntityId = 1, BirthDate = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), FirstName = "管理員", Gender = 9, LastName = "超級" }
                    );
                });

            modelBuilder.Entity("Manager.Models.GroupBuying.Group", b =>
                {
                    b.HasOne("Manager.Models.Generic.BusinessEntity", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Manager.Models.GroupBuying.GroupStore", b =>
                {
                    b.HasOne("Manager.Models.GroupBuying.Group", "Group")
                        .WithMany("GroupStores")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Manager.Models.GroupBuying.Store", "Store")
                        .WithMany("GroupStores")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Manager.Models.GroupBuying.Order", b =>
                {
                    b.HasOne("Manager.Models.Generic.BusinessEntity", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Manager.Models.GroupBuying.OrderDetail", b =>
                {
                    b.HasOne("Manager.Models.GroupBuying.Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Manager.Models.GroupBuying.ProductItem", "ProductItem")
                        .WithMany()
                        .HasForeignKey("ProductItemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Manager.Models.GroupBuying.OrderDetailProductAccessory", b =>
                {
                    b.HasOne("Manager.Models.GroupBuying.OrderDetail", "OrderDetail")
                        .WithMany("ProductAccessories")
                        .HasForeignKey("OrderDetailId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Manager.Models.GroupBuying.ProductAccessory", "ProductAccessory")
                        .WithMany()
                        .HasForeignKey("ProductAccessoryId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Manager.Models.GroupBuying.Product", b =>
                {
                    b.HasOne("Manager.Models.GroupBuying.ProductCategory", "ProductCategory")
                        .WithMany("Products")
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Manager.Models.GroupBuying.ProductAccessory", b =>
                {
                    b.HasOne("Manager.Models.GroupBuying.Product")
                        .WithMany("ProductAccessories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Manager.Models.GroupBuying.ProductCategory", b =>
                {
                    b.HasOne("Manager.Models.GroupBuying.Store", "Store")
                        .WithMany("ProductCategories")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Manager.Models.GroupBuying.ProductItem", b =>
                {
                    b.HasOne("Manager.Models.GroupBuying.Product")
                        .WithMany("ProductItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Manager.Models.GroupBuying.ProductOption", b =>
                {
                    b.HasOne("Manager.Models.GroupBuying.Product")
                        .WithMany("ProductOptions")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Manager.Models.GroupBuying.Store", b =>
                {
                    b.HasOne("Manager.Models.Generic.BusinessEntity", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Manager.Models.System.RolePermission", b =>
                {
                    b.HasOne("Manager.Models.System.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Manager.Models.System.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Manager.Models.System.User", b =>
                {
                    b.HasOne("Manager.Models.Generic.BusinessEntity", "BusinessEntity")
                        .WithMany()
                        .HasForeignKey("BusinessEntityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Manager.Models.System.UserRole", b =>
                {
                    b.HasOne("Manager.Models.System.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Manager.Models.System.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
